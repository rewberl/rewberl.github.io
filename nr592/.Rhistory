v1=as.factor(v1)
levels(v1)
v1=as.integer(v1)
v1[1:3]
v2
m1=matrix(c(v1,v2,v3),5,3)
m1
m1cols=list('age','height', 'pred')
m1cols
df1=as.data.frame(m1)
colnames(df1)=m1cols
df1
str(df1)
df1$id=paste0('a0',df1$age)
df1$id=as.factor(df1$id)
df1
df1=df1[,c(4,1:3)]
df1
fun.mean = function(x){
len=length(x)
mn=sum(x)/len
return(mn)
}
fun.mean(df1$age)
fun.mean(df1[,2])
for(t in 2:t){
varVals=df1[,t]
varVals=as.numeric(varVals)
varMean=fun.mean(varVals)
print(paste('Variable:', t))
return(varMean)
}
knitr::opts_chunk$set(echo = TRUE)
v1 = c(1,2,3,4,5)
v2 = seq(from=6, to=10, by=1)
v2
v2 = v2/2
v2
v1sq = v1^2
v1sq
v3 = v1sq + v2
v3
rm(v1sq)
v1 = as.integer(v1)
v2 = as.integer(v2)
v3 = as.integer(v3)
v3=sort(v3, decreasing=T)
v3
v1 = as.ordered(v1)
v1
str(v1)
v1<v2
m1=matrix(c(v1,v2,v3),nrow=5,ncol=3)
print(m1)
m1cols = c("age","height","pred")
df1 = as.data.frame(m1)
colnames(df1) = m1cols
print(df1)
str(df1)
df1$id = c("a01","a02","a03","a04","a05")
df1$id = as.factor(df1$id)
str(df1)
df1 = df1[c(4,1,2,3)]
str(df1)
mean5 = function(x){
average = mean(x)
return(average)
}
mean5(df1$age)
mean5(df1[,3])
mean5(df1$pred)
v1=c(1,2,3,4,5)
v1=c(1,2,3,4,5)
v2=seq(6,10)
v2=v2/2
v1sq=v1^2
v1sq+v2
v3=v1sq+v2
remove(v1sq)
v1=as.integer(v1)
v2=as.integer(v2)
v3=as.integer(v3)
v3=rev(v3)
v1=as.ordered(v1)
> v1<=v2
v1<=v2
m1=matrix(data=c(1,2,3,4,5,
3,3,4,4,5,
30,20,13,7,4),
nrow=5, ncol=3)
m1
m1cols=c("age","height","pred")
df1=data.frame(m1)
colnames(df1)=m1cols
df1
df1["id"]=c("a01","a02","a03","a04","a05")
df1
df1=df1[,c(4,1,2,3)]
df1
str(df1)
my_fun=function(x) {
sum(x)/5
}
f1=c(2,4,6,10,20)
my_fun(f1)
my_fun(col1)
knitr::opts_chunk$set(echo = TRUE)
v1 <- 1:5
v2 <- seq (6,10, by=1)
v2 <- v2 / 2
v1sq = v1^2
v3 = v1sq + v2
remove (v1sq)
v2<- as.integer(v2)
v3<- as.integer(v3)
class (v2)
v3 <- rev(v3)
v1 <- as.ordered(v1)
v1<v2
m1 = matrix (data=c(1,3,30,2,3,20,3,4,13,4,4,7,5,5,4), nrow=5, ncol=3, byrow=TRUE)
m1
m1col <- c("age","height", "pred")
df1 <- data.frame(m1)
colnames(df1) <- m1col
df1
str(df1)
df1$id=id
df1["id"] = paste0("a","0", df1[,"age"])
df1
str(df1)
df1= df1[,c("id","age","height","pred")]
df1
knitr::opts_chunk$set(echo = TRUE)
# Ryan Schroeder 4/02/2019
v1 = c(1L,2L,3L,4L,5L)
v2=seq(from=6,to=10)
v2= v2/2
v1sq= v1^2 ## create new vector v1sq by squaring the values of v1
v1sq + v2 ## result --> [1]  4.0  7.5 13.0 20.5 30.0
v3=v1sq + v2 ## create new vector v3 by adding v1sq and v2 together
remove(v1sq) ## remove v1sq object from the environment
class(v1) ## --> "integer"
class(v2) ## --> "numeric"
show(v2)
v2=as.integer(v2) ## reassign v2 as an integer class object
v3=as.integer(v3) ## reassign v3 as an integer class object
v3=sort(v3,decreasing=TRUE) ## reassign vector v3 to have numbers in decreasing order
v1<-as.ordered(v1) ## coerce v1 into ordered factor
str(v1) # inspect structure of v1
v1<v2 ## compare v1 to v2, to see which values of v1 are less than the corresponding values of v2
which(v1<v2) ## identifies the values of v1 that are less than the corresponding values of v2
m1=matrix(data=c(v1,v2,v3), ncol=3, byrow=FALSE)
print(m1)
m1cols<- c("age","height","pred") ##create vector for the column names of m1
df1<-as.data.frame(m1) ## coerce matrix 1 to new data frame named df1
colnames(df1) = m1cols ##assign vector m1cols to the column names of df1
print(df1) ## bada-bing, bada-boom
str(df1)
df1$age <- as.ordered(df1$age) ## coerce column $age in df1 back to an ordered factor
str(df1)
df1$id <- paste0("a0",df1$age) ## creates a new column (variable) "id" with the characters a0 in front of the corresponding value of the age column
df1$id<-as.factor(df1$id) ## coerce "id" column to a factor variable
str(df1)
df1 = df1[['id', "age",height,pred]]
df1$id <- paste0("a0",df1$age) ## creates a new column (variable) "id" with the characters a0 in front of the corresponding value of the age column
df1$id<-as.factor(df1$id) ## coerce "id" column to a factor variable
str(df1)
df1 = df1[['id', "age",'height','pred']]
## NR 592 - 01
## Assignment 1
rm(list = ls())
## Question 1.1
v1=c(1:5)
v1
## Question 1.2
v2=seq(6,10,1)
v2=as.integer(v2)
temp=v2/2
v2=temp
## Question 1.3
v1sq=v1^2
v1sq
v3=v1+v2
rm(v1sq)
## Question 1.4
str(v1)
str(v2)
str(v3)
v2=as.integer(v2)
v3=as.integer(v3)
## Question 1.5
v2
v3
## The values in each vector were rounded when coerced to be integers.
## Yes, it would be dangerous because you may get improper rounding.
## Question 1.6
v3=rev(v3)
v3
## Question 1.7
v1=as.factor(v1)
levels(v1)
## v1 has 5 levels, the lowest being 1
## Question 1.8
v1=as.integer(v1)
v1[1:3]
## Question 2.1
m1=matrix(c(v1,v2,v3),5,3)
m1
## Question 2.2
m1cols=list('age','height', 'pred')
m1cols
df1=as.data.frame(m1)
colnames(df1)=m1cols
df1
##Question 2.3
str(df1)
v1 = c(1,2,3,4,5)
v2 = seq(from=6, to=10, by=1)
v2 = v2/2
v1sq = v1^2
v3 = v1sq + v2
rm(v1sq)
v1 = as.integer(v1)
v2 = as.integer(v2)
v3 = as.integer(v3)
v3=sort(v3, decreasing=T)
v1 = as.ordered(v1)
m1=matrix(c(v1,v2,v3),nrow=5,ncol=3)
focoShelter = read.csv(file="./data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
focoShelter = read.csv(file="./lectures/data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
head(focoShelter)
library(reshape2)
head(melt(focoShelter))
colnames(focoShelter)
head(focoShelter[,-c(12:13)])
focoShelter = focoShelter[,-c(12:13)]
head(gather(focoShelter))
library(tidyr)
head(gather(focoShelter))
str(focoShelter)
colnames(focoShelter)
?gather
head(gather(focoShelter, "variable", "value", 2:11))
?separate
focoShelter = gather(focoShelter, "variable", "value", 2:11)
head(separate(focoShelter, 2, sep="..."))
separate(focoShelter, 2, into=c("variable","sex"), sep="...")
unique(focoShelter$variable)
?grepl
head(focoShelter[grepl("Men", focoShelter$variable, fixed=T),])
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
head(focoShelterMWF)
str(focoShelterMWF)
colnames(focoShelterMWF)
focoShelterNot = focoShelter[!grepl("Men", focoShelter$variable, fixed=T) &
!grepl("Women", focoShelter$variable, fixed=T) &
!grepl("Families", focoShelter$variable, fixed=T),]
head(focoShelterNot)
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="..."))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="[...]"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="[\...]"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="\..."))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\.\.\.)"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\\.\\.\\.)"))
nrow(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\\.\\.\\.)"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)"))
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
unique(focoShelterMWF$sex)
focoShelterNot$sex = "Total"
head(focoShelterMWF)
head(focoShelterMWF)
head(focoShelterNot)
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
head(focoShelterMWF)
head(focoShelterNot)
str(focoShelterNot)
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
str(focoShelterTidy)
?spread
head(spread(focoShelterTidy, c("variable","sex"), "value"))
head(spread(focoShelterTidy, variable, value))
nrow(spread(focoShelterTidy, variable, value))
View(spread(focoShelterTidy, variable, value))
str(focoShelter)
focoShelter = read.csv(file="./data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
focoShelter = read.csv(file="./lectures/data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
focoShelter = focoShelter[,-c(12:13)]
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
focoShelterNot = focoShelter[!grepl("Men", focoShelter$variable, fixed=T) &
!grepl("Women", focoShelter$variable, fixed=T) &
!grepl("Families", focoShelter$variable, fixed=T),]
focoShelterTidy = gather(focoShelter, "variable", "value", 2:11)
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
nrow(focoShelterTidy)
nrow(focoShelterMWF) + nrow(focoShelterNot)
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot$sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
View(spread(focoShelterTidy, variable, value))
head(focoShelter
)
tail(focoShelter)
View(focoShelter)
?ordered
str(focoShelter
)
head(focoShelter)
focoShelterTidy$Month = factor(focoShelterTidy$Month, levels=as.character(focoShelter$Month))
head(focoShelterTidy)
str(focoShelterTidy)
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
focoShelterTidy = spread(focoShelterTidy, variable, value)
focoShelterTidy$Month = factor(focoShelterTidy$Month, levels=as.character(focoShelter$Month))
head(focoShelterTidy)
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","Sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot$Sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = gather(focoShelter, "variable", "value", 2:11)
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","Sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot$Sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
str(focoShelterTidy)
focoShelterTidy = spread(focoShelterTidy, variable, value)
focoShelterTidy$Month = factor(focoShelterTidy$Month,
levels=as.character(focoShelter$Month))
focoShelterTidy$Sex = factor(focoShelterTidy$Sex,
levels=c("Men","Women","Families","Total"))
head(focoShelterTidy)
str(focoShelterTidy)
focoShelterTidy[with(focoShelterTidy, order(Month, Sex))]
head(focoShelterTidy[with(focoShelterTidy, order(Month, Sex)),])
focoShelterTidy = focoShelterTidy[with(focoShelterTidy, order(Month, Sex)),]
str(focoShelterTidy)
summary(focoShelterTidy)
data("airquality")
head(airquality)
summary(airquality)
airquality[is.na(airquality$Ozone),]
airquality[rowSums(is.na(airquality)) > 0,]
airquality[complete.cases(airquality),]
airquality[rowSums(is.na(airquality)) == 0,]
airquality = airquality[complete.cases(airquality),]
nrow(airquality)
data("airquality")
nrow(airquality)
airqualityCom = airquality[complete.cases(airquality),]
nrow(airqualityCom)
airquality[is.na(airquality) == T]
airqualityRep = airquality
airqualityRep[is.na(airqualityRep) == T] = 0
head(airqualityRep)
data("HairEyeColor")
hairEyeColor = as.data.frame(HairEyeColor)
gombe = read.csv(file="./data/gombe_128.csv", header=TRUE)
horseKicks = read.table(file="./data/HorseKicks.txt", header=TRUE, sep="\t")
library(readxl)
folktales = read_xlsx(path="./data/rsos150645supp1.xlsx",
sheet=1, range="A2:JP52")
folktales = as.data.frame(folktales)
colnames(folktales)[1] = "society"
cor(folktales)
head(gombe)
cor(gombe$dom, gombe$dominance)
summary(gombe)
cor(gombe$sex, gombe$dominance)
cor(gombe$dom, gombe$sex)
airquality
hairEyeColor
data("UCBAdmissions")
head(UBCAdmissions)
head(UCBAdmissions)
UCBAdmissions
head(as.data.frame(UCBAdmissions))
as.data.frame(UCBAdmissions)
data("airquality")
airquality
data("lh")
lh
data("longley")
longley
cor(longley$Armed.Forces, longley$Population)
cor(longley$Unemployed, longley$Employed)
data("mtcars")
mtcars
table(mtcars, gear, carb)
table(mtcars$gear, mtcars$carb)
?mtcars
cor(mtcars$gear, mtcars$carb)
head(gombe)
?plot
plot(gombe$sex, gombe$dom)
windows()
plot(gombe$dominance, gombe$extraversion)
plot(gombe$dominance, gombe$agreeableness)
plot(gombe$dominance, gombe$neuroticism)
airquality
plot(airquality$Month, airquality$Temp)
plot(airquality$Solar.R, airquality$Temp)
plot(airquality$Wind, airquality$Temp)
boxplot(airquality$Wind ~ airquality$Temp)
boxplot(Wind ~ Temp, data=airquality)
boxplot(Temp ~ Wind, data=airquality)
boxplot(airquality$Wind)
boxplot.stats(airquality$Wind)
boxplot.stats(airquality$Wind)$out
names(boxplot.stats(airquality$Wind))
?boxplot.stats
iqr?
?IQR
quantiles(airquality$Wind)
quantile(airquality$Wind)
quantile(airquality$Wind)
IQR(airquality$Wind)
quantile(airquality$Wind)[4]
quantile(airquality$Wind)[[4]]
airquality$Wind[airquality$Wind < (quantile(airquality$Wind)[[2]] - 1.5 * IQR(airquality$Wind)) |
airquality$Wind > (quantile(airquality$Wind)[[4]] + 1.5 * IQR(airquality$Wind))]
boxplot.stats(airquality$Wind)$out
boxplot.stats(Temp ~ Wind, data=airquality)
head(gombe)
summary(gombe)
median(gombe$extraversion)
names(sort(-table(gombe$extraversion)))[1]
names(sort(-table(gombe$extraversion)))
names(max(table(gombe$extraversion)))
max(table(gombe$extraversion))
range(gombe$extraversion)
min(gombe$extraversion)
max(gombe$extraversion)
sd(gombe$extraversion)
var(gombe$extraversion)
sd(gombe$extraversion)^2
sqrt(var(gombe$extraversion))
?confint
horseKicks
hist(horseKicks)
hist(as.vector(horseKicks))
str(horseKicks)
hist(horseKicks[,c(2:ncol(horseKicks))])
?hist
horseKicks[,c(2:ncol(horseKicks))]
as.numeric(horseKicks[,c(2:ncol(horseKicks)])
as.numeric(horseKicks[,c(2:ncol(horseKicks))])
as.matrix(horseKicks)
as.numeric(horseKicks)
str(horseKicks)
unlist(horseKicks)
hist(horseKicks[,c(2:ncol(horseKicks))])
is.list(horseKicks)
is.data.frame(horseKicks)
horseKicks[,c(2:ncol(horseKicks))]
unname(horseKicks[,c(2:ncol(horseKicks))])
hist(unname(horseKicks[,c(2:ncol(horseKicks))]))
hist(as.numeric(horseKicks[,c(2:ncol(horseKicks))]))
hist(unlist(horseKicks[,c(2:ncol(horseKicks))]))
horseKicksVals = unlist(horseKicks[,c(2:ncol(horseKicks))])
horseKicksVals
horseKicksVals = unname(unlist(horseKicks[,c(2:ncol(horseKicks))]))
horseKicksVals
hist(horseKicksVals, breaks=10)
hist(horseKicksVals, breaks=4)
density(horseKicksVals)
plot(density(horseKicksVals))
install.packages("vioplot")
library(vioplot)
?vioplot
vioplot(airquality$Wind)
vioplot(list(airquality$Wind, airquality$Ozone))
airquality
airquality$Wind[airquality$Month == 5]
airquality$Wind[airquality$Month == 6]
vioplot(airquality$Wind[airquality$Month == 5],
airquality$Wind[airquality$Month == 6],
airquality$Wind[airquality$Month == 7])
head(gombe)
plot(gombe$agreeableness, gombe$extraversion)
plot(gombe$openness, gombe$extraversion)
?abline
plot(gombe$openness, gombe$extraversion)
abline(lm(gombe$extraversion ~ gombe$openness), col="red")
cor(gombe$openness, gombe$extraversion)
