p.adjust(myPVals, method="fdr")
myPVals
windows()
qqnorm(grouseAOV2)
names(grouseAOV)
qqnorm(grouseAOV2$coefficients, grouseAOV2$residuals)
qqplot(grouseAOV2$coefficients, grouseAOV2$residuals)
qqplot(grouseAOV2)
qqnorm(=grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqline(grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqline(grouseAOV2$residuals, col="red")
fcbird2018 = read.csv("./data/CurrentYearResultsByCount2018.csv", header=T,
stringsAsFactors=F)
fcbird1968 = read.csv("./data/CurrentYearResultsByCount1968.csv", header=T,
stringsAsFactors=F)
colnames(fcbird2018)[1:2] = c("Species", "N2018")
colnames(fcbird1968)[1:2] = c("Species", "N1968")
library(dplyr)
fcbird = full_join(fcbird2018[,1:2], fcbird1968[,1:2], by="Species")
head(fcbird)
library(vegan)
t(fcbird[,2:3])
fcbirdT = t(fcbird[,2:3])
gsub(",", "", fcbirdT, fixed=T)
as.numeric(gsub(",", "", fcbirdT, fixed=T))
data.matrix(gsub(",", "", fcbirdT, fixed=T))
gsub(",", "", fcbirdT, fixed=T)
as.matrix(gsub(",", "", fcbirdT, fixed=T))
data.matrix(gsub(",", "", fcbirdT, fixed=T))
fcbirdT = as.numeric(gsub(",", "", fcbirdT, fixed=T))
fcbirdT
matrix(fcbirdT, nrow=2, ncol=length(fcbird$Species))
fcbirdT = matrix(fcbirdT, nrow=2, ncol=length(fcbird$Species))
fcbirdT
colnames(fcbird)
rownames(fcbirdT) = colnames(fcbird)[2:3]
colnames(fcbirdT) = fcbird$Species
fcbirdT
diversity(fcbirdT)
?diversity
install.packages("vegan")
install.packages("vegan")
fcbirdT
library(vegan)
diversity(fcbirdT)
diversity.fit()
diversity(na.omit(fcbirdT[1,]), index="shannon")
diversity(na.omit(fcbirdT[2,]), index="shannon")
diversity(na.omit(fcbirdT[1,]), index="simpson")
diversity(na.omit(fcbirdT[2,]), index="simpson")
?rarefy
rarefy(na.omit(fcbirdT[1,]), sample=5)
rarefy(na.omit(fcbirdT[2,]), sample=c(2, 5, 10, 20))
windows()
rarecurve(na.omit(fcbirdT[1,]), sample=10)
rarecurve(na.omit(fcbirdT[1,]), sample=5)
rarecurve(na.omit(fcbirdT[1,]))
rarecurve(t(fcbirdT))
rarecurve(na.omit(fcbirdT))
?specaccum
rarecurve(t(na.omit(fcbirdT[1,])))
specaccum(fcbirdT)
specaccum(complete.cases(fcbirdT))
specaccum(fcbirdT[complete.cases(fcbirdT)])
?read.csv
fcbird = read.csv("./data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, header=T, stringsAsFactors=F)
fcbird = read.csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, header=T, stringsAsFactors=F)
fcbird = read.csv("./data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lecture.data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lecture/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=203, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=205, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv", sep=",",
skip=205, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=300, nrow=180, header=T, stringsAsFactors=F)
head(fcbird)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=",", allowEscapes=T,
skip=204, nrow=18032, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=",", allowEscapes=T,
skip=204, nrow=180, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=",", allowEscapes=T,
skip=205, nrow=180, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=",", allowEscapes=T,
skip=202, nrow=180, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=c(",", "\t"), allowEscapes=T,
skip=202, nrow=180, header=T, stringsAsFactors=F)
fcbird = read.table("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
sep=c(",", "\t"), allowEscapes=T,
skip=201, nrow=180, header=T, stringsAsFactors=F)
library(tidyr)
?read_csv
??read_csv
library(readr)
?read_csv
fcbird = read_csv("./data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=202, n_max=18032)
fcbird = read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=202, n_max=18032)
head(fcbird)
read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=203, n_max=18032)
read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032)
read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=205, n_max=18032)
read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032)
fcbird = read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032)
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032))
tail(fcbird)
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18030))
tail(fcbird)
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18031))
tail(fcbird)
head(fcbird)
library(stringr)
?str_split_fixed
str_split_fixed(fcbird$COM_NAME, "\r\n", 2)
head(str_split_fixed(fcbird$COM_NAME, "\r\n", 2))
fcbird$SPEC_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,2]
fcbird$COM_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,1]
head(fcbird)
head(gsub("\[\]", "", fcbird$SPEC_NAME))
head(gsub("[]", "", fcbird$SPEC_NAME))
head(gsub("\\[\\]", "", fcbird$SPEC_NAME))
head(gsub("[\\[\\]]", "", fcbird$SPEC_NAME))
head(gsub("\\[|\\]", "", fcbird$SPEC_NAME))
fcbird$SPEC_NAME = gsub("\\[|\\]", "", fcbird$SPEC_NAME)
head(fcbird)
?substr
substr(fcbird$CountYear, 1, 4)
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032))
fcbird$SPEC_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,2]
fcbird$SPEC_NAME = gsub("\\[|\\]", "", fcbird$SPEC_NAME)
fcbird$COM_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,1]
fcbird$CountYear = as.integer(substr(fcbird$CountYear, 1, 4))
head(fcbird)
fcbird[is.na(fcbird$CountYear),]
fcbird = as.data.frame(read_csv("./data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032))
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18032))
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18031))
fcbird$SPEC_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,2]
fcbird$SPEC_NAME = gsub("\\[|\\]", "", fcbird$SPEC_NAME)
fcbird$COM_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,1]
fcbird$CountYear = as.integer(substr(fcbird$CountYear, 1, 4))
head(fcbird)
tail(fcbird)
fcbird = fcbird[,c("COM_NAME","SPEC_NAME","CountYear")]
head(fcbird)
tail(fcbird)
fcbird = as.data.frame(read_csv("./lectures/data/HistoricalResultsByCount [COFC-1901-2018].csv",
skip=204, n_max=18031))
fcbird$SPEC_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,2]
fcbird$SPEC_NAME = gsub("\\[|\\]", "", fcbird$SPEC_NAME)
fcbird$COM_NAME = str_split_fixed(fcbird$COM_NAME, "\r\n", 2)[,1]
fcbird$CountYear = as.integer(substr(fcbird$CountYear, 1, 4))
fcbird = fcbird[,c("COM_NAME","SPEC_NAME","CountYear","how_manyCW")]
head(fcbird)
tail(fcbird)
?spread
fcbirdW = spread(fcbird[,-2], "COM_NAME", "how_manyCW")
head(fcbirdW)
nrow(fcbirdW[complete.cases(fcbirdW),])
?complete.cases
head(fcbirdW[,colSums(is.na(fcbirdW))<nrow(fcbirdW)])
dim(fcbirdW[,colSums(is.na(fcbirdW))<nrow(fcbirdW)])
good <- sapply(psr, function(y) !any(diff(y) != 1L))
sapply(fcbirdW, function(y) !any(diff(y) != 1L))
l1 = combn(2:length(fcbirdW), 2, function(x) fcbirdW[x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
head(best)
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
tail(sort(score),5)
?whicvh
?which
best_score = score[which(score == 205)]
best = l1[[best_score]]
head(best)
score[which(score == 205)]
best_score = which(score == 205)
best = l1[[best_score]]
tail(sort(score), 10)
best_score = which(score == 195)
best = l1[[best_score]]
which(score == 195)
best_score = which(score == 192)
best = l1[[best_score]]
best_score = which(score == 186)
best = l1[[best_score]]
best_score = which(score == 180)
best = l1[[best_score]]
best_score = which(score == 164)
best = l1[[best_score]]
best_score = which(score == 146)
best = l1[[best_score]]
best_score = which(score == 142)
best = l1[[best_score]]
best_score = which(score == 132)
best = l1[[best_score]]
best_score = which(score == 128)
best = l1[[best_score]]
which(score == 128)
best = l1[[1216]]
best = l1[[21751]]
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
nrow(best[complete.cases(best),])
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
best = best[complete.cases(best),]
head(best)
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
best = cbind(fcbirdW$CountYear, best)
best = best[complete.cases(best),]
head(best)
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
best = cbind(fcbirdW$CountYear, best)
colnames(best)[1] = "Year"
best = best[complete.cases(best),]
head(best)
library(vegan)
diversity(best)
str(best)
best[,2:5] = sapply(best[,2:5], as.numeric)
str(best)
diversity(best)
diversity(t(best))
l1 = combn(2:length(fcbirdW[,-1]), 2, function(x) fcbirdW[,-1][x[1]:x[2]], simplify = FALSE)
# If you also need "combinations" of only single columns, then uncomment the next line
# l1 = c(d[-1], l1)
l2 = sapply(l1, function(x) sum(complete.cases(x)))
score = sapply(1:length(l1), function(i) NCOL(l1[[i]]) * l2[i])
best_score = which.max(score)
best = l1[[best_score]]
head(best)
rownames(best) = fcbirdW$CountYear
head(best)
best = best[complete.cases(best),]
best = sapply(best, as.numeric)
str(best)
best = l1[[best_score]]
rownames(best) = fcbirdW$CountYear
best = best[complete.cases(best),]
head(best)
str(best)
head(sapply(best, as.numeric))
head(tapply(best, as.numeric))
best = sapply(best, as.numeric)
best = l1[[best_score]]
rownames(best) = fcbirdW$CountYear
best = best[complete.cases(best),]
best = lapply(best, function(x) as.numeric(x))
str(best)
best = l1[[best_score]]
rownames(best) = fcbirdW$CountYear
best = best[complete.cases(best),]
best = apply(best, function(x) as.numeric(x))
str(best)
best = l1[[best_score]]
rownames(best) = fcbirdW$CountYear
best = best[complete.cases(best),]
best = apply(best, as.numeric)
str(best)
best = l1[[best_score]]
rownames(best) = fcbirdW$CountYear
best = best[complete.cases(best),]
# best = apply(best, as.numeric)
best = data.frame(lapply(best, function(x) as.numeric(as.character(x))),
check.names=F, row.names=rownames(best))
str(best)
head(best)
diversity(best)
diversity(best, index="shannon")
diversity(best, index="simpson")
?diversity
bestDiv = diversity(best, index="simpson")
names(bestDiv)
windows()
plot(names(bestDiv), bestDiv)
abline(lm(bestDiv ~ names(bestDiv)), col="red")
abline(lm(bestDiv ~ as.numeric(names(bestDiv))), col="red")
plot(as.numeric(names(bestDiv)), bestDiv)
abline(lm(bestDiv ~ as.numeric(names(bestDiv))), col="red")
cor.test(bestDiv ~ as.numeric(names(bestDiv)))
cor.test(as.numeric(names(bestDiv)), bestDiv)
rarefy(best), sample=10)
rarefy(best, sample=10)
rarefy(best, sample=c(10, 100))
rarefy(best, sample=c(5, 15))
head(best)
head(rarefy(best, sample=c(5, 15)))
rarecurve(best)
?specaccum
specaccum(best)
rarecurve(t(best))
?rarecurve
specnumber(best)
bestDiv / log(specnumber(best))
diversity(best, index="shannon") / log(specnumber(best))
bm = read.csv("./data/BMWC2004_onsitedata.csv", header=T, stringsAsFactors=F)
bm = read.csv("./lectures/data/BMWC2004_onsitedata.csv", header=T, stringsAsFactors=F)
head(bm)
head(bm)
str(bm)
colnames(bm)
summary(bm[,36:45])
bm = read.csv("./data/BMWC2004_onsitedata.csv", header=T, na.strings="88",
stringsAsFactors=F)
bm = read.csv("./lectures/data/BMWC2004_onsitedata.csv", header=T, na.strings="88",
stringsAsFactors=F)
summary(bm[,36:45])
windows()
hist(bm$familiar)
?hist
hist(bm$familiar, breaks=3)
hist(bm$familiar, breaks=2)
hist(bm$familiar, breaks=3)
bm$familiar
hist(ordered(bm$familiar))
hist(bm$familiar, breaks=1:3)
hist(bm$familiar, breaks=1:3.5)
library(coin)
str(bm)
table(bm$state)
table(bm$State)
table(bm$st)
bmTest = bm
bmTest$st = ifelse(bmTest$st != "MT", "Not MT", "MT")
table(bmTest$st)
table(bmTest$st, bmTest$familiar)
bmTestTab = table(bmTest$st, bmTest$familiar)
bmTestTab
?independence_test
independence_test(familiar ~ st, data=bmTest)
bmTest = bm
bmTest$st = factor(ifelse(bmTest$st != "MT", "Not MT", "MT"))
table(bmTest$st, bmTest$familiar)
independence_test(familiar ~ st, data=bmTest)
bmTest = bm
bmTest$st = factor(ifelse(bmTest$st != "MT", "Not MT", "MT"))
bmTest$familiar = ordered(bmTest$familiar)
str(bmTest)
independence_test(familiar ~ st, data=bmTest)
library(lavaan)
?lavCor
colnames(bm)
str(lapply(bmLik[,36:45], function(x) ordered(x)))
bmLik = bm
bmLik$st = factor(ifelse(bmLik$st != "MT", "Not MT", "MT"))
bmLik$familiar = ordered(bmLik$familiar)
lapply(bmLik[,36:45], function(x) ordered(x))
bmLik[,36:45] = lapply(bmLik[,36:45], function(x) ordered(x))
str(bmLik)
bm$recent_f
bmLik$recent_f
lavCor(bmLik[,36:45])
library(corrplot)
bmLikCor = lavCor(bmLik[,36:45])
corrplot.mixed(bmLikCor, lower="ellipse", upper="number")
?cmdscale
cmdscale(bmLikCor)
bmCMD = cmdscale(bmLikCor)
bmLikCor
class(bmLikCor)
bmCMD = cmdscale(as.dist(bmLikCor))
library(psych)
bmLikDist = cor2dist(bmLikCor)
bmLikDist
bmCMD = cmdscale(bmLikDist)
bmCMD
plot(bmCMD[,1], bmCMD[,2])
plot(bmCMD[,1], bmCMD[,2])
text(bmCMD[,1], bmCMD[,2] + 0.01, labels=row.names(bmCMD))
?text
plot(bmCMD[,1], bmCMD[,2])
text(bmCMD[,1], bmCMD[,2] + 0.1, labels=row.names(bmCMD), col="blue")
plot(bmCMD[,1], bmCMD[,2])
text(bmCMD[,1], bmCMD[,2] + 0.05, labels=row.names(bmCMD), col="blue")
plot(bmCMD[,1], bmCMD[,2])
text(bmCMD[,1], bmCMD[,2] + 0.025, labels=row.names(bmCMD), col="blue")
library(MASS)
?isoMDS
bmNMD = isoMDS(bmLikDist)
bmNMD
plot(bmCMD$points[,1], bmCMD$points[,2])
text(bmCMD$points[,1], bmCMD$points[,2] + 0.025, labels=row.names(bmCMD), col="blue")
plot(bmNMD$points[,1], bmNMD$points[,2])
text(bmNMD$points[,1], bmNMD$points[,2] + 0.025, labels=row.names(bmNMD), col="blue")
plot(bmNMD$points[,1], bmNMD$points[,2])
text(bmNMD$points[,1], bmNMD$points[,2] + 0.025, labels=row.names(bmNMD), col="blue")
plot(bmNMD$points[,1], bmNMD$points[,2])
text(bmNMD$points[,1], bmNMD$points[,2] + 0.025, labels=row.names(bmNMD$points), col="blue")
?vegan::metaMDS
head(best)
bestNMD = metaMDS(best)
bestNMD
plot(bestNMD)
names(bestNMD)
bestNMD$points
plot(bestNMD)
text(bestNMD$points[,1], bestNMD$points[,2] + 0.025, labels=row.names(bestNMD$points), col="blue")
plot(bestNMD)
text(bestNMD$points[,1], bestNMD$points[,2] + 0.025,
labels=row.names(bestNMD$points), col="blue", cex=0.7)
plot(bestNMD)
text(bestNMD$points[,1], bestNMD$points[,2] + 0.02,
labels=row.names(bestNMD$points), col="blue", cex=0.7)
bestNMD$species
plot(bestNMD)
text(bestNMD$points[,1], bestNMD$points[,2] + 0.02,
labels=row.names(bestNMD$points), col="blue", cex=0.7)
text(bestNMD$species[,1], bestNMD$species[,2] + 0.02,
labels=row.names(bestNMD$species), col="red", cex=0.7)
?hclust
hclust(bmLikDist, method="ward.D2")
bmLikDist
hclust(bmLikDist)
base::hclust(bmLikDist)
stats::hclust(bmLikDist)
class(bmLikDist)
as.dist(cor2dist(bmLikCor))
bmLikDist = as.dist(cor2dist(bmLikCor))
bmLikDist
hclust(bmLikDist, method="ward.D2")
bmHC = hclust(bmLikDist, method="ward.D2")
plot(bmHC)
plot(bmHC, horiz=T)
plot(as.dendrogram(bmHC), horiz=T)
?heatmap
heatmap(bmHC)
heatmap(bmLikDist)
heatmap(as.matrix(bmLikDist))
heatmap(bmLikCor)
heatmap(bmLikCor, distFun=lavCor)
heatmap(bmLikCor, distfun=lavCor)
heatmap(bmLikCor, hclustfun=function(x) hclust(x, method="ward.D2"))
install.packages("pvclust")
library(pvclust)
?pvclust
bmPVHC = pvclust(bmLikDist, method="ward.D2")
bmPVHC = pvclust(bmLikDist, method.hclust="ward.D2")
bmPVHC = pvclust(bmLikDist, method.hclust="ward.D2", dist=T)
bmPVHC = pvclust(bmLikDist, method.hclust="ward.D2", diss=T)
bmLik
pvclust(bmLik[,36:45], method.hclust="ward.D2")
bmPVHC = pvclust(as.numeric(bmLik[,36:45]), method.hclust="ward.D2")
str(bm)
bmPVHC = pvclust(bm[,36:45], method.hclust="ward.D2")
bmPVHC
bmPVHC = pvclust(t(bm[,36:45]), method.hclust="ward.D2")
plot(bmPVHC)
plot(bmPVHC)
pvrect(bmPVHC)
