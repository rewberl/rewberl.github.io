str(focoShelter)
colnames(focoShelter)
?gather
head(gather(focoShelter, "variable", "value", 2:11))
?separate
focoShelter = gather(focoShelter, "variable", "value", 2:11)
head(separate(focoShelter, 2, sep="..."))
separate(focoShelter, 2, into=c("variable","sex"), sep="...")
unique(focoShelter$variable)
?grepl
head(focoShelter[grepl("Men", focoShelter$variable, fixed=T),])
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
head(focoShelterMWF)
str(focoShelterMWF)
colnames(focoShelterMWF)
focoShelterNot = focoShelter[!grepl("Men", focoShelter$variable, fixed=T) &
!grepl("Women", focoShelter$variable, fixed=T) &
!grepl("Families", focoShelter$variable, fixed=T),]
head(focoShelterNot)
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="..."))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="[...]"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="[\...]"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="\..."))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\.\.\.)"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\\.\\.\\.)"))
nrow(separate(focoShelterMWF, 2, into=c("variable","sex"), sep="(\\.\\.\\.)"))
head(separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)"))
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
unique(focoShelterMWF$sex)
focoShelterNot$sex = "Total"
head(focoShelterMWF)
head(focoShelterMWF)
head(focoShelterNot)
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
head(focoShelterMWF)
head(focoShelterNot)
str(focoShelterNot)
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
str(focoShelterTidy)
?spread
head(spread(focoShelterTidy, c("variable","sex"), "value"))
head(spread(focoShelterTidy, variable, value))
nrow(spread(focoShelterTidy, variable, value))
View(spread(focoShelterTidy, variable, value))
str(focoShelter)
focoShelter = read.csv(file="./data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
focoShelter = read.csv(file="./lectures/data/Fort_Collins_Shelter_Service_Data.csv", header=TRUE)
focoShelter = focoShelter[,-c(12:13)]
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
focoShelterNot = focoShelter[!grepl("Men", focoShelter$variable, fixed=T) &
!grepl("Women", focoShelter$variable, fixed=T) &
!grepl("Families", focoShelter$variable, fixed=T),]
focoShelterTidy = gather(focoShelter, "variable", "value", 2:11)
focoShelterMWF = focoShelter[grepl("Men", focoShelter$variable, fixed=T) |
grepl("Women", focoShelter$variable, fixed=T) |
grepl("Families", focoShelter$variable, fixed=T),]
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
nrow(focoShelterTidy)
nrow(focoShelterMWF) + nrow(focoShelterNot)
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot$sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
View(spread(focoShelterTidy, variable, value))
head(focoShelter
)
tail(focoShelter)
View(focoShelter)
?ordered
str(focoShelter
)
head(focoShelter)
focoShelterTidy$Month = factor(focoShelterTidy$Month, levels=as.character(focoShelter$Month))
head(focoShelterTidy)
str(focoShelterTidy)
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
focoShelterTidy = spread(focoShelterTidy, variable, value)
focoShelterTidy$Month = factor(focoShelterTidy$Month, levels=as.character(focoShelter$Month))
head(focoShelterTidy)
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","Sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot$Sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = gather(focoShelter, "variable", "value", 2:11)
focoShelterMWF = focoShelterTidy[grepl("Men", focoShelterTidy$variable, fixed=T) |
grepl("Women", focoShelterTidy$variable, fixed=T) |
grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterNot = focoShelterTidy[!grepl("Men", focoShelterTidy$variable, fixed=T) &
!grepl("Women", focoShelterTidy$variable, fixed=T) &
!grepl("Families", focoShelterTidy$variable, fixed=T),]
focoShelterMWF = separate(focoShelterMWF, 2, into=c("variable","Sex"),
sep="\\.\\.\\.(?!.*\\.\\.\\.)")
focoShelterNot$Sex = "Total"
focoShelterNot = focoShelterNot[,c(1,2,4,3)]
focoShelterTidy = rbind(focoShelterMWF, focoShelterNot)
str(focoShelterTidy)
focoShelterTidy = spread(focoShelterTidy, variable, value)
focoShelterTidy$Month = factor(focoShelterTidy$Month,
levels=as.character(focoShelter$Month))
focoShelterTidy$Sex = factor(focoShelterTidy$Sex,
levels=c("Men","Women","Families","Total"))
head(focoShelterTidy)
str(focoShelterTidy)
focoShelterTidy[with(focoShelterTidy, order(Month, Sex))]
head(focoShelterTidy[with(focoShelterTidy, order(Month, Sex)),])
focoShelterTidy = focoShelterTidy[with(focoShelterTidy, order(Month, Sex)),]
str(focoShelterTidy)
summary(focoShelterTidy)
data("airquality")
head(airquality)
summary(airquality)
airquality[is.na(airquality$Ozone),]
airquality[rowSums(is.na(airquality)) > 0,]
airquality[complete.cases(airquality),]
airquality[rowSums(is.na(airquality)) == 0,]
airquality = airquality[complete.cases(airquality),]
nrow(airquality)
data("airquality")
nrow(airquality)
airqualityCom = airquality[complete.cases(airquality),]
nrow(airqualityCom)
airquality[is.na(airquality) == T]
airqualityRep = airquality
airqualityRep[is.na(airqualityRep) == T] = 0
head(airqualityRep)
data("HairEyeColor")
hairEyeColor = as.data.frame(HairEyeColor)
gombe = read.csv(file="./data/gombe_128.csv", header=TRUE)
horseKicks = read.table(file="./data/HorseKicks.txt", header=TRUE, sep="\t")
library(readxl)
folktales = read_xlsx(path="./data/rsos150645supp1.xlsx",
sheet=1, range="A2:JP52")
folktales = as.data.frame(folktales)
colnames(folktales)[1] = "society"
cor(folktales)
head(gombe)
cor(gombe$dom, gombe$dominance)
summary(gombe)
cor(gombe$sex, gombe$dominance)
cor(gombe$dom, gombe$sex)
airquality
hairEyeColor
data("UCBAdmissions")
head(UBCAdmissions)
head(UCBAdmissions)
UCBAdmissions
head(as.data.frame(UCBAdmissions))
as.data.frame(UCBAdmissions)
data("airquality")
airquality
data("lh")
lh
data("longley")
longley
cor(longley$Armed.Forces, longley$Population)
cor(longley$Unemployed, longley$Employed)
data("mtcars")
mtcars
table(mtcars, gear, carb)
table(mtcars$gear, mtcars$carb)
?mtcars
cor(mtcars$gear, mtcars$carb)
head(gombe)
?plot
plot(gombe$sex, gombe$dom)
windows()
plot(gombe$dominance, gombe$extraversion)
plot(gombe$dominance, gombe$agreeableness)
plot(gombe$dominance, gombe$neuroticism)
airquality
plot(airquality$Month, airquality$Temp)
plot(airquality$Solar.R, airquality$Temp)
plot(airquality$Wind, airquality$Temp)
boxplot(airquality$Wind ~ airquality$Temp)
boxplot(Wind ~ Temp, data=airquality)
boxplot(Temp ~ Wind, data=airquality)
boxplot(airquality$Wind)
boxplot.stats(airquality$Wind)
boxplot.stats(airquality$Wind)$out
names(boxplot.stats(airquality$Wind))
?boxplot.stats
iqr?
?IQR
quantiles(airquality$Wind)
quantile(airquality$Wind)
quantile(airquality$Wind)
IQR(airquality$Wind)
quantile(airquality$Wind)[4]
quantile(airquality$Wind)[[4]]
airquality$Wind[airquality$Wind < (quantile(airquality$Wind)[[2]] - 1.5 * IQR(airquality$Wind)) |
airquality$Wind > (quantile(airquality$Wind)[[4]] + 1.5 * IQR(airquality$Wind))]
boxplot.stats(airquality$Wind)$out
boxplot.stats(Temp ~ Wind, data=airquality)
head(gombe)
summary(gombe)
median(gombe$extraversion)
names(sort(-table(gombe$extraversion)))[1]
names(sort(-table(gombe$extraversion)))
names(max(table(gombe$extraversion)))
max(table(gombe$extraversion))
range(gombe$extraversion)
min(gombe$extraversion)
max(gombe$extraversion)
sd(gombe$extraversion)
var(gombe$extraversion)
sd(gombe$extraversion)^2
sqrt(var(gombe$extraversion))
?confint
horseKicks
hist(horseKicks)
hist(as.vector(horseKicks))
str(horseKicks)
hist(horseKicks[,c(2:ncol(horseKicks))])
?hist
horseKicks[,c(2:ncol(horseKicks))]
as.numeric(horseKicks[,c(2:ncol(horseKicks)])
as.numeric(horseKicks[,c(2:ncol(horseKicks))])
as.matrix(horseKicks)
as.numeric(horseKicks)
str(horseKicks)
unlist(horseKicks)
hist(horseKicks[,c(2:ncol(horseKicks))])
is.list(horseKicks)
is.data.frame(horseKicks)
horseKicks[,c(2:ncol(horseKicks))]
unname(horseKicks[,c(2:ncol(horseKicks))])
hist(unname(horseKicks[,c(2:ncol(horseKicks))]))
hist(as.numeric(horseKicks[,c(2:ncol(horseKicks))]))
hist(unlist(horseKicks[,c(2:ncol(horseKicks))]))
horseKicksVals = unlist(horseKicks[,c(2:ncol(horseKicks))])
horseKicksVals
horseKicksVals = unname(unlist(horseKicks[,c(2:ncol(horseKicks))]))
horseKicksVals
hist(horseKicksVals, breaks=10)
hist(horseKicksVals, breaks=4)
density(horseKicksVals)
plot(density(horseKicksVals))
install.packages("vioplot")
library(vioplot)
?vioplot
vioplot(airquality$Wind)
vioplot(list(airquality$Wind, airquality$Ozone))
airquality
airquality$Wind[airquality$Month == 5]
airquality$Wind[airquality$Month == 6]
vioplot(airquality$Wind[airquality$Month == 5],
airquality$Wind[airquality$Month == 6],
airquality$Wind[airquality$Month == 7])
head(gombe)
plot(gombe$agreeableness, gombe$extraversion)
plot(gombe$openness, gombe$extraversion)
?abline
plot(gombe$openness, gombe$extraversion)
abline(lm(gombe$extraversion ~ gombe$openness), col="red")
cor(gombe$openness, gombe$extraversion)
windows()
pan = read.table("./data/PanTHERIA_1-0_WR05_Aug2008.txt", header=T, sep="\t",
na.strings=c("-999","-999.00"), stringsAsFactors=F)
str(pan)
library(stringr)
for (i in 1:length(colnames(pan))) {
if (grepl("_", colnames(pan)[i])) {
colnames(pan)[i] = str_split_fixed(colnames(pan)[i], "_", n=2)[2]
}
}
colnames(pan)
table(pan$TrophicLevel[pan$Order == "Artiodactyla"])
binom.test(table(pan$TrophicLevel[pan$Order == "Artiodactyla"]),
alternative="greater")
table(pan$ActivityCycle[pan$Order == "Primates"],
pan$Family[pan$Order == "Primates"])
fisher.test(table(pan$ActivityCycle[pan$Order == "Primates"],
pan$Family[pan$Order == "Primates"]))
fisher.test(table(pan$ActivityCycle[pan$Order == "Primates"],
pan$Family[pan$Order == "Primates"]),
simulate.p.value=T)
na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae"])[1:20]
mean(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae"], na.rm=T)
t.test(na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae"]),
mu=100, alternative="greater")
na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae" & pan$LittersPerYear == 1])[1:10]
na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae" & pan$LittersPerYear == 2])[1:10]
t.test(na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae" & pan$LittersPerYear == 1]),
na.omit(pan$AdultForearmLen_mm[pan$Family == "Pteropodidae" & pan$LittersPerYear == 2]))
pan[complete.cases(pan$PopulationDensity_n.km2, pan$HuPopDen_Mean_n.km2),
c("PopulationDensity_n.km2", "HuPopDen_Mean_n.km2")][1:20,]
cor.test(pan[complete.cases(pan$PopulationDensity_n.km2,
pan$HuPopDen_Mean_n.km2),
"PopulationDensity_n.km2"],
pan[complete.cases(pan$PopulationDensity_n.km2,
pan$HuPopDen_Mean_n.km2),
"HuPopDen_Mean_n.km2"])
panCanid = pan[pan$Family == "Canidae",]
panCanid = panCanid[complete.cases(panCanid$LitterSize,
panCanid$HomeRange_km2),]
panCanidModel = lm(HomeRange_km2 ~ LitterSize, data=panCanid)
summary(panCanidModel)
library(ggplot2)
ggplot(panCanid, aes(x=LitterSize, y=HomeRange_km2)) +
geom_point() +
geom_smooth(method="lm", se=F, color="red")
ggplot(panCanid, aes(x=LitterSize, y=HomeRange_km2)) +
geom_point() +
geom_line(data=fortify(panCanidModel), aes(x=LitterSize, y=.fitted),
color="red", size=1)
predict(panCanidModel, newdata=data.frame(LitterSize=1:10))
range(panCanid$LitterSize)
panCanidModel2 = lm(HomeRange_km2 ~ LitterSize + DispersalAge_d, data=panCanid)
summary(panCanidModel2)
panCanidModel3 = lm(HomeRange_km2 ~ LitterSize * DispersalAge_d, data=panCanid)
summary(panCanidModel3)
windows()
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2, group=LitterSize)) +
geom_line(aes(color=LitterSize))
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_line(aes(color=as.factor(LitterSize)))
panCanid$LitterSize
panCanid$DispersalAge_d
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_line()
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2) +
geom_line()
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2)) +
geom_line()
library(tidyr)
?summarize
library(dplyr)
?dplyr::summarize
library(rcompanion)
?summarySE
library(Rmisc)
?summarySE
summarySE(panCanid, "HomeRange_km2", c("LitterSize"))
panCanidSummary = summarySE(panCanid, "HomeRange_km2", c("LitterSize"))
panCanidSummary = summarySE(panCanid, "HomeRange_km2", c("LitterSize", "DispersalAge_d"))
panCanidSummary
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_line(aes(color=as.factor(LitterSize)))
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_line()
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_point()
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_point(aes(color=as.factor(LitterSize)))
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=as.factor(LitterSize))) +
geom_point(aes(color=as.factor(LitterSize))) +
geom_smooth(aes(color=as.factor(LitterSize)), se=F)
summary(panCanid$LitterSize)
summary(panCanid$HomeRange_km2)
library(vioplot)
windows()
vioplot(panCanid$LitterSize)
windows()
vioplot(panCanid$DispersalAge_d)
panCanid$LitterSize == median(panCanid$LitterSize)
?ifelse
panCanid$LitterSizeD = ifelse(panCanid$LitterSize < median(panCanid$LitterSize),
"Low", "High")
head(panCanid)
windows()
ggplot(panCanidSummary, aes(x=DispersalAge_d, y=HomeRange_km2, group=LitterSizeD)) +
geom_line(aes(color=as.factor(LitterSizeD)))
panCanid$LitterSizeD = ifelse(panCanid$LitterSize < median(panCanid$LitterSize),
"Low", "High")
ggplot(panCanid, aes(x=DispersalAge_d, y=HomeRange_km2, group=LitterSizeD)) +
geom_line(aes(color=as.factor(LitterSizeD)))
?TukeyHSD()
grouse = read.csv("./lectures/data/journal.pone.0150798.s005.CSV", header=T,
stringsAsFactors=F)
grouseAOV = aov(FoodF_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
TukeyHSD(grouseAOV)
grouseAOV = aov(FoodF_1M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(FoodF_3M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrug_1M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrug_3M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrug_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrub_1M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrub_3M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(Shrub_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(ARTR_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(ARTR_1M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(ARTR_3M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(ARTR_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
grouseAOV = aov(ARTR_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
TukeyHSD(grouseAOV)
grouseAOV = aov(Shrub_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
TukeyHSD(grouseAOV)
grouseAOV = aov(Shrub_10M ~ as.factor(YEAR),
data=grouse[grouse$Type=="Nest" & grouse$Fate=="hatch",])
summary(grouseAOV)
TukeyHSD(grouseAOV)
grouseAOV2 = aov(Bground_10M ~ Type + Fate,
data=grouse)
summary(grouseAOV2)
grouse = read.csv("./data/journal.pone.0150798.s005.CSV", header=T,
stringsAsFactors=F)
grouse = read.csv("./lectures/data/journal.pone.0150798.s005.CSV", header=T,
stringsAsFactors=F)
grouse$Type = as.factor(grouse$Type)
grouse$Fate = as.factor(grouse$Fate)
grouseAOV2 = aov(Bground_10M ~ CORE_AREA + Type,
data=grouse)
summary(grouseAOV2)
?glmm
?glmer
library(lme4)
?glmer
grouse$YEAR = as.factor(grouse$YEAR)
grouseME = glmer(Type ~ Litter_10M + (1 | YEAR), data=grouse, family="binomial")
summary(grouseME)
grouseGLM = glm(Type ~ Litter_10M, data=grouse, family="binomial")
summary(grouseGLM)
grouseME = glmer(ate ~ annual_prec_30year + Rock_3M + Cactus_3M + BioCrust_3M + (1 | YEAR), data=grouse, family="binomial")
summary(grouseME)
grouseME = glmer(Fate ~ annual_prec_30year + Rock_3M + Cactus_3M + BioCrust_3M + (1 | YEAR), data=grouse, family="binomial")
summary(grouseME)
grouseME = glmer(Type ~ Litter_10M + Rock_10M + (1 | YEAR),
data=grouse, family="binomial")
summary(grouseME)
grouseAOV2 = aov(Bground_10M ~ CORE_AREA + Type,
data=grouse)
windows()
plot(grouseAOV2)
t.test(grouse$ARTR_10M[grouse$Fate == "hatch"],
grouse$ARTR_10M[grouse$Fate == "fail"])
.05*5
1 - (1 - 0.05)^5
myT1 = t.test(grouse$ARTR_10M[grouse$Fate == "hatch"],
grouse$ARTR_10M[grouse$Fate == "fail"])
myT1
myT2 = t.test(grouse$Shrub_H_10M[grouse$Fate == "hatch"],
grouse$Shrub_H_10M[grouse$Fate == "fail"])
myT2
myT3 = t.test(grouse$FoodF_10M[grouse$Fate == "hatch"],
grouse$FoodF_10M[grouse$Fate == "fail"])
myT3
myT4 = t.test(grouse$Rock_10M[grouse$Fate == "hatch"],
grouse$Rock_10M[grouse$Fate == "fail"])
myT4
myT5 = t.test(grouse$BioCrust_10M[grouse$Fate == "hatch"],
grouse$BioCrust_10M[grouse$Fate == "fail"])
myT5
myT1$p.value
myPVals = c(myT1$p.value, myT2$p.value, myT3$p.value, myT4$p.value,
myT5$p.value)
myPVals
?p.adj
p.adjust
?p.adjust
p.adjust(myPVals, method="bonferroni")
p.adjust(myPVals, method="fdr")
myPVals
windows()
qqnorm(grouseAOV2)
names(grouseAOV)
qqnorm(grouseAOV2$coefficients, grouseAOV2$residuals)
qqplot(grouseAOV2$coefficients, grouseAOV2$residuals)
qqplot(grouseAOV2)
qqnorm(=grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqline(grouseAOV2$residuals)
qqnorm(grouseAOV2$residuals)
qqline(grouseAOV2$residuals, col="red")
